<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="adminMapper">
	<resultMap type="com.study.shop.admin.vo.MenuVO" id="menu">
		<id 		column="MENU_CODE" 				property="menuCode"/>
		<result column="MENU_NAME"	 			property="menuName"/>
		<result column="MENU_URL"	 				property="menuUrl"/>
		<result column="SUB_MENU_CODE"	 	property="subMenuCode"/>
		<result column="SUB_MENU_NAME"	 	property="subMenuName"/>
		<result column="SUB_MENU_URL"	 		property="subMenuUrl"/>
	</resultMap>
	
	<resultMap type="com.study.shop.admin.vo.SubMenuVO" id="subMenu">
		<id 		column="MENU_CODE" 				property="menuCode"/>
		<result column="SUB_MENU_CODE"	 	property="subMenuCode"/>
		<result column="SUB_MENU_NAME"	 	property="subMenuName"/>
		<result column="SUB_MENU_URL"	 		property="subMenuUrl"/>
	</resultMap>
		<resultMap type="com.study.shop.admin.vo.OrderStatusVO" id="orderStatus">
		<id 				column="ORDER_NUM" 					property="orderNum"/>
		<result 		column="STATUS_CODE" 				property="statusCode"/>
		<result 		column="BUY_CODE" 					property="buyCode"/>
		<result 		column="MEM_ID" 						property="memId"/>
		<result 		column="UPDATE_DATE" 				property="updateDate"/>
	</resultMap>
	

	<!-- 카테고리 관리페이지에서 카테고리 목록 조회 -->
	<select id="getCateListForAdmin" resultMap="itemMapper.category">
		SELECT CATE_CODE
					, CATE_NAME
					, ORDER_NUM
					, IS_USE
		FROM ITEM_CATEGORY
	</select>
	
	<select id="getSubMenuList" resultMap="subMenu">
		SELECT SUB_MENU_CODE
				, SUB_MENU_NAME
				, SUB_MENU_URL
				, MENU_CODE
		FROM ADMIN_SUBMENU
		WHERE MENU_CODE = #{menuCode}
		ORDER BY SUB_MENU_CODE
	</select>
	
	<select id="getAdminMenu" resultMap="menu">
	SELECT A.MENU_CODE
		     , A.MENU_NAME
		     , A.MENU_URL
		     , SUB.SUB_MENU_CODE
	FROM ADMIN_MENU A
    	 INNER JOIN ADMIN_SUBMENU SUB 
    	 ON A.MENU_CODE = SUB.MENU_CODE
    	 INNER JOIN (
			SELECT MENU_CODE
          				, MIN(TO_NUMBER(SUBSTR(SUB_MENU_CODE, -3))) AS MIN_NUM
          FROM ADMIN_SUBMENU
          GROUP BY MENU_CODE
     ) SUB_MIN 
    ON SUB.MENU_CODE = SUB_MIN.MENU_CODE 
    AND TO_NUMBER(SUBSTR(SUB_MENU_CODE, -3)) = SUB_MIN.MIN_NUM
	ORDER BY A.MENU_CODE
	</select>
	
	<insert id="setCateList">
	INSERT INTO ITEM_CATEGORY (
		CATE_CODE
		, CATE_NAME
		, ORDER_NUM
	) VALUES (
		(SELECT ('CATE_' || LPAD((NVL(MAX(TO_NUMBER(SUBSTR(CATE_CODE, 6))),0) + 1), 3, 0))
		FROM ITEM_CATEGORY)
		, #{cateName}
		, (SELECT NVL(MAX(ORDER_NUM), 0) +  1 FROM ITEM_CATEGORY)
	)
	</insert>
	
	<select id="checkCateName" resultType="int">
	SELECT COUNT(CATE_CODE)
	FROM ITEM_CATEGORY
	WHERE CATE_NAME = #{cateCode}
	</select>
	
	<update id="updateIsUse">
	UPDATE ITEM_CATEGORY
	SET IS_USE = #{isUse}
	WHERE CATE_CODE = #{cateCode}
	</update>
	
	<delete id="deleteCate">
	DELETE ITEM_CATEGORY
	WHERE CATE_CODE = #{cateCode}
	</delete>
	
	<select id="getNextItemCode" resultType="String">
		SELECT ('ITEM_' || LPAD((NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6))),0) + 1), 3, 0))
				FROM SHOP_ITEM
	</select>
	
	<insert id="regItem">
		INSERT INTO SHOP_ITEM (
			ITEM_CODE
			, CATE_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, ITEM_STOCK
			, ITEM_INTRO
			, ITEM_STATUS
		) VALUES (
			#{itemCode}
			, #{cateCode}
			, #{itemName}
			, #{itemPrice}
			, #{itemStock}
			, #{itemIntro}
			, #{itemStatus}
		)
	</insert>
	
	<insert id="insertImgs">
		INSERT INTO ITEM_IMG (
			IMG_CODE
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, IS_MAIN
			, ITEM_CODE
		)
		<foreach collection="imgList" index="i" item="img" separator="UNION ALL">
		SELECT (SELECT ('IMG_' || LPAD((NVL(MAX(TO_NUMBER(SUBSTR(IMG_CODE, 5))),0) + 1 + #{i}), 3, 0))
					FROM ITEM_IMG)
				, #{img.originFileName}
				, #{img.attachedFileName}
				, #{img.isMain}
				, #{img.itemCode}
		FROM DUAL 
		</foreach>
	</insert>
	
	<select id="getItemList" resultMap="itemMapper.item">
		SELECT ITEM_CODE
	            , I.CATE_NAME
	            , ITEM_NAME
	            , DECODE(ITEM_STATUS, 1, '판매중', 2, '준비중', '매진') ITEM_STATUS
	            , ITEM_CODE
	            , ITEM_STOCK
		FROM SHOP_ITEM S , ITEM_CATEGORY I
		WHERE S.CATE_CODE = I.CATE_CODE
		<if test='searchItemVO != null and !searchItemVO.searchItemName.equals("")'>
		AND UPPER(S.ITEM_NAME) LIKE '%'||UPPER(#{searchItemVO.searchItemName})||'%'
		</if>
		<if test='searchItemVO != null and searchItemVO.searchCateCode.length != 0'>
		AND S.CATE_CODE IN (
		<foreach collection="searchItemVO.searchCateCode" separator="," item="cateCode">
		#{cateCode}
		</foreach>
		)
		</if>
		<if test='searchItemVO != null and searchItemVO.searchItemStatus != 0 '>
		AND S.ITEM_STATUS = #{searchItemVO.searchItemStatus}
		</if>		
		<if test='searchItemVO != null and !searchItemVO.searchFromItemStock.equals("")'>
		AND S.ITEM_STOCK &gt;= #{searchItemVO.searchFromItemStock} 
		</if>		
		<if test='searchItemVO != null and !searchItemVO.searchToItemStock.equals("")'>
		AND S.ITEM_STOCK &lt;= #{searchItemVO.searchToItemStock}
		</if>	
		
		ORDER BY ITEM_NAME
	</select>
	
	<select id="searchItemStatus" resultMap="itemMapper.item">
	SELECT ITEM_CODE
            , I.CATE_NAME
            , ITEM_NAME
            , DECODE(ITEM_STATUS, 1, '판매중', 2, '준비중', '매진') ITEM_STATUS
            , ITEM_CODE
            , ITEM_STOCK
		FROM SHOP_ITEM S , ITEM_CATEGORY I
		WHERE ITEM_STATUS = #{itemStatus}
		AND S.CATE_CODE = I.CATE_CODE
		ORDER BY ITEM_NAME
	</select>
	
	<select id="updateItemForm" resultMap="itemMapper.item">
	SELECT S.ITEM_CODE
            , I.CATE_NAME
            , ITEM_NAME
            , ITEM_PRICE
            , ITEM_INTRO
            , ITEM_STATUS
            , ITEM_STOCK
            , IMG.IMG_CODE
            , IMG.ORIGIN_FILE_NAME
            , IMG.ATTACHED_FILE_NAME
            , IMG.IS_MAIN
		FROM SHOP_ITEM S , ITEM_CATEGORY I , ITEM_IMG IMG
		WHERE S.CATE_CODE = I.CATE_CODE
		AND S.ITEM_CODE = #{itemCode}
		AND IMG.ITEM_CODE = S.ITEM_CODE
	</select>
	
	<update id="updateItem">
	UPDATE SHOP_ITEM 
		SET 
		    CATE_CODE = (SELECT CATE_CODE
		                            FROM ITEM_CATEGORY
		                            WHERE CATE_NAME = #{cateName})
		    , ITEM_NAME = #{itemName}
		    , ITEM_PRICE = #{itemPrice}
		    , ITEM_INTRO = #{itemIntro}
		    , ITEM_STOCK = #{itemStock}
		    , ITEM_STATUS = #{itemStatus}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<select id="getSaleList" resultMap="buyMapper.buy">
	SELECT TO_CHAR(BUY_DATE, 'YYYY-MM') AS MONTH
        		, SUM(BUY_PRICE) AS BUY_PRICE
     			, COUNT(BUY_PRICE) AS BUY_DATE
	FROM SHOP_BUY
	<if test='setYear != null and !setYear.equals("")'>
	WHERE BUY_DATE &gt;= TO_DATE('${setYear}-01-01', 'YYYY-MM-DD')
	AND BUY_DATE &lt;= TO_DATE(TO_NUMBER(${setYear}) + 1 || '-01-01', 'YYYY-MM-DD')
	</if>
	GROUP BY TO_CHAR(BUY_DATE, 'YYYY-MM')
	ORDER BY MONTH
	</select>
	
	<select id="getSaleMap" resultType="Map">
	SELECT NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', 1, 0)), 0) AS "01월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', 1, 0)), 0) AS "02월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', 1, 0)), 0) AS "03월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', 1, 0)), 0) AS "04월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', 1, 0)), 0) AS "05월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', 1, 0)), 0) AS "06월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', 1, 0)), 0) AS "07월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', 1, 0)), 0) AS "08월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', 1, 0)), 0) AS "09월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', 1, 0)), 0) AS "10월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', 1, 0)), 0) AS "11월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', 1, 0)), 0) AS "12월"
	FROM SHOP_BUY
	WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year}
	UNION ALL
	SELECT NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '01', BUY_PRICE, 0)), 0) AS "01월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '02', BUY_PRICE, 0)), 0) AS "02월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '03', BUY_PRICE, 0)), 0) AS "03월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '04', BUY_PRICE, 0)), 0) AS "04월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '05', BUY_PRICE, 0)), 0) AS "05월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '06', BUY_PRICE, 0)), 0) AS "06월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '07', BUY_PRICE, 0)), 0) AS "07월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '08', BUY_PRICE, 0)), 0) AS "08월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '09', BUY_PRICE, 0)), 0) AS "09월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '10', BUY_PRICE, 0)), 0) AS "10월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '11', BUY_PRICE, 0)), 0) AS "11월"
            , NVL(SUM(DECODE(TO_CHAR(BUY_DATE, 'MM'), '12', BUY_PRICE, 0)), 0) AS "12월"
	FROM SHOP_BUY
	WHERE TO_CHAR(BUY_DATE, 'YYYY') = #{year}
	</select>
	
	<select id="saleStatusByCategory" resultType="Map">
	SELECT NVL(SUM(DECODE(CATE_CODE, 'CATE_001', BUY_CNT, 0)), 0) AS "IT/인터넷"
            , NVL(SUM(DECODE(CATE_CODE, 'CATE_002', BUY_CNT, 0)), 0) AS "자기개발서적"
            , NVL(SUM(DECODE(CATE_CODE, 'CATE_003', BUY_CNT, 0)), 0) AS "소설/에세이"
            , NVL(SUM(DECODE(CATE_CODE, 'CATE_004', BUY_CNT, 0)), 0) AS "시사/경제"
	FROM BUY_DETAIL B, SHOP_ITEM S
	WHERE B.ITEM_CODE = S.ITEM_CODE
	</select>
	
	<select id="saleStatusByCategory2" resultType="Map">
	WITH IMSI_TABLE AS
	(
	SELECT ITEM_CODE
			, (SELECT CATE_CODE
				FROM SHOP_ITEM
				WHERE ITEM_CODE = BUY_DETAIL.ITEM_CODE) AS CATE_CODE
			, BUY_CNT
	FROM BUY_DETAIL
	)
	SELECT  SUM(BUY_CNT) AS SUM_BUY_CNT
			, (SELECT CATE_NAME 
				FROM ITEM_CATEGORY 
				WHERE CATE_CODE = IMSI_TABLE.CATE_CODE) AS CATE_NAME
	FROM IMSI_TABLE
	GROUP BY CATE_CODE
	</select>
	
	<select id="getOriginOrderList" resultType="Map">
	SELECT O.BUY_CODE
            , O.MEM_ID
            , MEM.MEM_TELL
            , BUY.BUY_PRICE
            , STATUS_NAME
            , INFO.STATUS_CODE
            , TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') AS BUY_DATE
	FROM SHOP_MEMBER MEM, ORDER_STATUS O, SHOP_BUY BUY, STATUS_INFO INFO
	WHERE MEM.MEM_ID = O.MEM_ID
	AND BUY.BUY_CODE = O.BUY_CODE
	AND INFO.STATUS_CODE = O.STATUS_CODE
	<if test='status != null and status.length != 0'>
	AND STATUS_NAME IN (
	<foreach collection="status" separator="," item="itemStatus">
	#{itemStatus}
	</foreach>
	)
	</if>
	<if test='buyCode != null and !buyCode.equals("")'>
	AND O.BUY_CODE  = #{buyCode}
	</if>		
	<if test='memId != null and !memId.equals("")'>
	AND O.MEM_ID  = #{memId}
	</if>		
	<if test='memTell != null and !memTell.equals("")'>
	AND MEM.MEM_TELL  = #{memTell}
	</if>		
	<if test='fromDate != null and !fromDate.equals("")'>
	AND TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate} 
	</if>	
	<if test='toDate != null and !toDate.equals("")'>
	AND TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
	</if>	
	<if test='orderBy != null and orderBy.equals("date")'>
	ORDER BY BUY_DATE
	</if>
	<if test='orderBy != null and orderBy.equals("status")'>
	ORDER BY INFO.STATUS_CODE DESC
	</if>
	</select>
	
	
	
	<select id="getOrderList" resultType="Map">
		SELECT BUY_CODE 
		            , MEM_ID 
		            , MEM_TELL 
		            , BUY_PRICE 
		            , STATUS_NAME 
		            , STATUS_CODE 
		            , BUY_DATE 
		            , ROW_NUM 
		FROM 
		(
		    SELECT BUY_CODE 
		    , MEM_ID 
		    , MEM_TELL 
		    , BUY_PRICE 
		    , STATUS_NAME 
		    , STATUS_CODE 
		    , BUY_DATE 
		    , ROWNUM AS ROW_NUM 
		    FROM 
		    (
		        SELECT O.BUY_CODE 
		        , O.MEM_ID 
		        , MEM.MEM_TELL 
		        , BUY.BUY_PRICE 
		        , STATUS_NAME 
		        , INFO.STATUS_CODE 
		        , TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') AS BUY_DATE 
		        FROM SHOP_MEMBER MEM, ORDER_STATUS O, SHOP_BUY BUY, STATUS_INFO INFO    
		        WHERE MEM.MEM_ID = O.MEM_ID 
		        AND BUY.BUY_CODE = O.BUY_CODE 
		        AND INFO.STATUS_CODE = O.STATUS_CODE 
    <if test='status != null and status.length != 0'>
			AND STATUS_NAME IN (
		<foreach collection="status" separator="," item="itemStatus">
			#{itemStatus}
		</foreach>
			)
	</if>
	<if test='buyCode != null and !buyCode.equals("")'>
			AND UPPER(O.BUY_CODE) LIKE '%'||UPPER(#{buyCode})||'%'
	</if>		
	<if test='memId != null and !memId.equals("")'>
			AND UPPER(O.MEM_ID) LIKE '%'||UPPER(#{memId})||'%'
	</if>		
	<if test='memTell != null and !memTell.equals("")'>
			AND MEM.MEM_TELL  = #{memTell}
	</if>		
	<if test='fromDate != null and !fromDate.equals("")'>
			AND TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate} 
	</if>	
	<if test='toDate != null and !toDate.equals("")'>
			AND TO_CHAR(BUY.BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
	</if>	
	<if test='orderBy != null and orderBy.equals("date")'>
			ORDER BY BUY_DATE
	</if>
	<if test='orderBy != null and orderBy.equals("status")'>
			ORDER BY INFO.STATUS_CODE DESC
	</if>
    		)
		)
		WHERE ROW_NUM &gt;= #{pageVO.startNum} AND ROW_NUM &lt;= #{pageVO.endNum}
	
	</select>	
	
	<select id="getStatusCnt" resultType="int">
		SELECT COUNT(O.BUY_CODE)
		FROM ORDER_STATUS O, SHOP_MEMBER M, STATUS_INFO INFO , SHOP_BUY B
		WHERE O.MEM_ID = M.MEM_ID
		AND INFO.STATUS_CODE = O.STATUS_CODE
		AND B.BUY_CODE = O.BUY_CODE
	<if test='status != null and status.length != 0'>
	AND INFO.STATUS_NAME IN (
	<foreach collection="status" separator="," item="itemStatus">
	#{itemStatus}
	</foreach>
	)
	</if>
	<if test='buyCode != null and !buyCode.equals("")'>
	AND UPPER(O.BUY_CODE) LIKE '%'||UPPER(#{buyCode})||'%'
	</if>		
	<if test='memId != null and !memId.equals("")'>
	AND UPPER(O.MEM_ID) LIKE '%'||UPPER(#{memId})||'%'
	</if>		
	<if test='memTell != null and !memTell.equals("")'>
	AND M.MEM_TELL  = #{memTell}
	</if>		
	<if test='fromDate != null and !fromDate.equals("")'>
	AND TO_CHAR(B.BUY_DATE, 'YYYY-MM-DD') &gt;= #{fromDate} 
	</if>	
	<if test='toDate != null and !toDate.equals("")'>
	AND TO_CHAR(B.BUY_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
	</if>	
	</select>
	
	
	<update id="updateStatus">
	<foreach collection="buyCodes" item="buyCode" separator=";" open="DECLARE BEGIN" close="; END;">
		UPDATE ORDER_STATUS
		SET STATUS_CODE = (SELECT STATUS_CODE
                          		          FROM ORDER_STATUS
                                 		   WHERE BUY_CODE = #{buyCode}) + 1
		WHERE BUY_CODE = #{buyCode}
	</foreach>
	</update>
	
	<select id="getStatusList" resultType="String">
	SELECT STATUS_NAME
	FROM STATUS_INFO
	ORDER BY STATUS_CODE
	</select>
	
	<select id="getBuyDetailList" resultType="Map">
	SELECT ITEM_NAME 
            , ITEM_PRICE 
            , DETAIL.BUY_CNT 
            , DETAIL.DETAIL_BUY_PRICE 
            , TO_CHAR(BUY_DATE, 'YYYY-MM-DD') AS BUY_DATE
            , MEM_ID
	            , BUY_PRICE
	FROM SHOP_ITEM ITEM, BUY_DETAIL DETAIL, SHOP_BUY SHOP
	WHERE SHOP.BUY_CODE = DETAIL.BUY_CODE
	AND ITEM.ITEM_CODE = DETAIL.ITEM_CODE
	AND MEM_ID = #{memId}
	AND DETAIL.BUY_CODE = #{buyCode}
	</select>
	
</mapper>

